//    Openbravo POS is a point of sales application designed for touch screens.
//    Copyright (C) 2007-2009 Openbravo, S.L.
//    http://www.openbravo.com/product/pos
//
//    This file is part of Openbravo POS.
//
//    Openbravo POS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Openbravo POS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.

package com.openbravo.pos.printer.fiscal;

import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.printer.DeviceFiscalPrinter;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JComponent;

public class DevicePrinterFiscalEpson extends javax.swing.JPanel implements DeviceFiscalPrinter {
    
    private String m_sName;
    private String m_sPortName;
    private ArrayList<String> m_sJPFCommands;
    private FiscalEpson fiscalEpson;
    
    /** Creates new form JPrinterScreen2 */
    public DevicePrinterFiscalEpson(String portName) {
        initComponents();
        
        m_sName = AppLocal.getIntString("Printer.Fiscal");
        m_sPortName = portName;
        m_sJPFCommands = new ArrayList<String>();

        fiscalEpson = new FiscalEpson(m_sPortName);
    }
    
    public String getPrinterDescription() {
        return null;
    }           

    public void beginReceipt() {
        m_sJPFCommands.clear();
    }
    public void endReceipt() {
        fiscalEpson.fromLines(m_sJPFCommands);
        fiscalEpson.run();
        fiscalEpson.reset();

        m_sJPFCommands.clear();
    }
    
    public void openDrawer() {
        // Una simulacion
        Toolkit.getDefaultToolkit().beep();
    }   
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_jScrollView = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(m_jScrollView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane m_jScrollView;
    // End of variables declaration//GEN-END:variables

    public String getFiscalName() {
        return m_sName;
    }

    public JComponent getFiscalComponent() {
        return this;
    }

    public void printLine(String sText, double dprice, double dunits, int taxinfo) {
        m_sJPFCommands.add(sText);
    }

    public void printMessage(String smessage) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void printTotal(String sPayment, double dpaid) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void printZReport() {
        beginReceipt();
        m_sJPFCommands.add(new String("@CIERREZ|"));
        endReceipt();
    }

    public void printXReport() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
}